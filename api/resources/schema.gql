interface Node {
  id: ID!
}

type User {
  id: ID
  username: String
  email: String
}

input ClaimInput {
  body: String
}

type Claim implements Node {
  id: ID!
  body: String
  creator: User
  contributors: [User]
  evidence: EvidenceConnection
  supportCount: Int
  opposeCount: Int
  agreeCount: Int
  disagreeCount: Int
  agree: Boolean
  disagree: Boolean
}

type EvidenceConnection {
  edges: [Evidence]
}

type Evidence {
  id: ID!
  cursor: String
  supports: Boolean
  claim: Claim
  relevance: Float
  myRelevanceRating: Int
}

type Query {
  currentUser: User
  claims: [Claim]
  evidenceForClaim(claimID: ID): [Evidence]
}

type Mutation {
  addClaim(claim: ClaimInput): Claim
  addEvidence(claimID: ID!, supports: Boolean!, claim: ClaimInput!): Evidence
}

schema {
  query: Query
  mutation: Mutation
}
